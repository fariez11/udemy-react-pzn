_________
Component
  - saat belajar React, kita harus terbiasa dengan istilah Component
  - Component adalah kumpulan kode yang bisa digunakan secara independen
  - Component bisa berisikan satu atau lebih HTML Element, kode JS dan CSS
  - Tidak ada aturan harus sebarapa kecil atau besar sebuah Component
  - anggap saja seperti functionm kita bisa membuat function yang besar atau kecil, karena tujuan Function adalah agar
    bisa digunakan secara berulang-ulang, begitu juga tujuan dari Component
  - struktur Component mirip seperti DOM(Document Object Model), dimana kita bisa membuat Component didalam Component  
    lain

___
JSX
  - React menggunakan JSX ketika membuat Component
  - JSX (Javascript XML atau JS Syntax Extension), adalah kombinasi kode JS dan XML (HTML), dimana kita bisa membuat 
    Component dengan mudah menggunakan kode XML dan JS dalam satu file
  - JSX diperkenalkan oleh Facebook di React, namun saat ini JSX sudah banyak diadopsi oleh banyak Framework JS lainnya

_______________
Membuat Project
  - untuk membuat project React, kita akan menggunakan Vite sebagai build toolnya 
  - kita bisa membuat project React menggunakan beberapa perintah
  - untuk membuat project React menggunakan JS: 
      npm create vite@latest nama-aplikasi -- --template react
  - untuk membuat project React menggunakan Typescript: 
      npm create Vite@latest nama-aplikasi -- --template-react-ts
  https://vite/dev//quide/#scaffolding-your-first-vite-project

*notes: 
  public ~> untuk assets
  src ~> untuk code
  index.html ~> sebagai filenya

____________________ 
Update versi ReactJS
  - gunakan ReactJS terbaru
  https://www.npmjs.com/package/react
  https://www.npmjs.com/package/react-dom

_________________
Membuat Component
  - biasanya, Component aka dibuat dalam satu file JSX dengan nama sesuai dengan nama component nya
  - misal, kita akan membuat Component bernama Hello World
  - maka, kita bisa membuat file Hello World.JSX
  - selanjutnya, kita perlu mmebuat default function dengan nama Componentnya, yaitu Hello World
  - Return dari function tersebut adalah element UI yang akan ditampilkan

_____________________
Menampilkan Component
  - untuk menampilkan Component, diperlukan dari React Root
  - kita bisa membuat React Root menggunakan method createRoot(element)
  https://react.dev/reference/react-dom/client/createRoot
  - selanjutnya untuk menampilkan Component di React Root, kita bisa gunakan method render(component)
  - untuk membantu mncari masalah saat development, React mnenyediakan component StrictMode,kita bisa menggunakan 
    StrictMode untuk menampilkan component di Root
  https://react.dev/reference/react/StrictMode

_________ 
Component
  - React Component mendukung semua elemen HTML dan SVG
  - jadi kita tidak perlu khawatir ketika membuat Component, karena semua element pasti didukung
  https://react.dev/reference/react-dom/components

  > Multiple Component
    - sebelumnya kita membuat file JSX untuk satu Component
    - walaupun itu adalah praktek yang baik, tapi bukan berarti itu wajib dilakukan
    - Component sebenarnya hanyalah sebuah function yang mengembalikan React Element, oleh karena itu jika kita ingin membuat Component, kita hanya cukup membuat function yang mengambalikan React Element

___ 
JSX
  - web dibuat menggunakan HTML, CSS dan Javascript. biasanya kita akan menyimpan konten di HTML, desain di CSS dan   
    logika aplikasi di JS. dan biasanya kita akan simpan di file-file yang terpisah
  - tapi saat ini, web sudah lebih interaktif, seringnya konten HTML ditampilkan berdasarkan logika aplikasi di JS
  - oleh karena itu, React menggunakan logika aplikasi dan membuat konten di satu tempat yang sama, JSX

____________________
Mengubah HTML ke JSX
  - saat mengubah kode HTML ke JSX, kita tidak bisa lakukan semudah COpy Paste kodenya
  - JSX memiliki aturan uang lebih ketat dibanding HTML, contohnya saat menggunakan tag element, wajib menggunakan tag  
    tutup
  - misal kita tidak bisa menggunakan <img src="">
  - kita harus gunakan tag ketika menggunakan JSX <img src=""/>
  - beberapa attribute di tag element pun berbeda, kita akan bahas secara bertahap

__________ 
Aturan JSX
  - component hanya boleh mengambalikan satu element, jika kita ingin mengambalikan beberapa element, kita harus bungkus
    dalam parent element
  - wajib menutup semua tag element
  - Attribute menggunakan CamelCase.Attribute di element JSX akan dikonversi ke variable JS, oleh karena itu nama 
    attribute harus mengikuti cara pembuatan nama variable di JS, yaitu tidak bisa menggunakan - (strip). Karna keterbatasan ini, kebanyakan attr di element JSX akan menggunakan camelCase, contih className (bukan class-name)

  > JSX Converter
    - jika misal kita sudah punya kode HTML, dan ingin mengkonversi ke JSX
    - disarankan menggunakan Converter sehingga kita tidak perlu lakukan secara manual lagi
    https://transform.tools/html-to-jsx

_________________
Javascript di JSX
  - kadang-kadang, kita kasus dimana kita ingin mengakses kode Javascript di JSX
  - pada kasus ini, kita bisa menggunakan kurung kurawal untuk mengakses kode JS di JSX

  > Kurung Kurawal di JSX
    - penggunaan kurung kurawal di JSX hanya bisa dilakukan pada dua lokasi
    - sebagai teks, seperti pada contoh sebelumnya
    - sebagai nilai atribut pada tag element, misal <img src={location}>
  
  > Kurung Kurawal Double pada JSX
    - pada beberapa attr, contohnya style. kita bisa menggunakan JS Object sebagai parameter
    - oleh karena itu, kadang sekilas terlihat seperti kurung kurawal double, padahal sebenarnya hanya satu kurung kurawal, dan datanya adalaha JS Object

_____ 
Props
  - React Component menggunakan Props untuk berkomunikasi
  - Parent Component bisa mengirim informasi ke Child Component dengan menggunakan Props
  - Props itu mirip seperti attribute di HTML Element, tapi kita bisa mengirim nilai JS seperti object, array, function
    atau yang lainnya 
  
  > Menambah Props
    - untuk menambahkan Props pada Component, kita hanya perlu menmabahkan parameter object pada function di Component
    - Parameter Props tersebut merupakan Javascript Object, sehingga kita bisa mengakses detail attribute yang dikirim 
      dari parent melalui Props

  > Destructuring Props
    - salah satu yang biasa dilakukan oleh programmer React adalah, melakukan destructuring parameter pada Props
    - hal ini untuk mempermudah ketika membaca, sehingga kita tahu attribute apa yang tersedia pada Component tersebut
    - Karena Props adalah JS Object, jadi kita juga bisa menambahkan fitur seperti Default Value pada Props

  > Mengirim Props
    - untuk mengirim Props, kita bisa menggunakan attr seperti HTML Element untuk menggunakan Component

_____________
Spread Syntax
  - kadang-kadang, mengirim Props dari Parent Component ke Child Component sangat merepotkan
  - jika kita hanya ingin melakukan forward semua Props ke Child Component, kita bisa menggunakan Spread Syntax di JS

________________
Nested Component
  - JSX mendukung pembuatan Nested Component
  - hal ini memungkinkan kita bisa membuat Component yang didalamnya bisa ditambahkan Component lain secara dinamis
  - agar component bisa memiliki Component lain didalamnya, kita bisa menggunakan attr children pada Props
  - misal sekarang kita akan membuat Component bernama Container, dan didalamnya kita bisa berisi Component lainnya

_____ 
Style
  - sampai saat ini, kita hanya baru membahas HTML dan JS di JSX, bagaimana dengan CSS?
  - CSS sendiri bukan bagian dari JSX, jika kita ingin membuat style CSS, maka kita perlu buat dalam file CSS, atau 
    langsung di attr style menggunakan kurung kurawal double yang pernah dicontohkan sebelumnya
  - namun sekarang kita akan coba dalam file CSS
  - menggunakan Style pada JSX, tidak menggunakan attr class, melainkan className
  https://react.dev/reference/react-dom/components/common#applying-css-styles

___________ 
Conditional
  - saat kita membuat halaman web, seringkali kita menampilkan tampilan berbeda pada kondisi tertentu
  - hal ini juga bisa dilakukan di JSX
  - kita bisa menambahkan kondisi menggunakan JS, dan mengembalikan Component yang berbeda berdasarkan kondisi yang 
    diinginkan
  - contoh kita akan membuat halaman todoList, dna jika Todonya sudah selesai, kita akan coret element textnya

  > Null Component
    - pada kasus tertentu, mungkin ada kondisi dimana kita ingin mengembalikan Component, atau tidak ingin 
      mengambalikan apapun
    - kita bisa mengembalikan null untuk menandai bahwa tidak ada Component yang kita kembalikan

  > Ternary Operator
    - kadang pada kasus lebih sederhana, kita bisa menggunakan Ternary Operator Javascript di JSX

  > Logical AND
    - dibeberapa kasus yang lebih sederhana, kadang di JSX sering memanfaatkan Logical AND di JS
    - misal jika kondisi terpenuhi maka akan menampilkan, jika tidak maka tidak akan menampilkan

____________________ 
Collection Component
  - kita pasti akan sering menampilkan Component yang ssama berkali kali sesuai koleksi data. JSX sendiri tidak 
    memiliki fitur perulangan
  - untuk menampilkan multiple Component, sama seperti Conditional, kita akan memanfaatkan Javascript
  - kita bisa menggunakan Javascript Array untuk mengubah data Array menjadi Copmonent, misal menggunakan method map()
    pada Array
  - misal sekarang kita akan coba ubah TodoList yang sebelumnya kita buat menjadi array

  > Component Key
  - jika kita di text editor, mungkin kita akan melihat pesan peringatan "Missing key prop for element iterator"
  - saat membuat Collection Component, tiap Component diperlukan id (unique, string dan number) menggunakan attr key
  - kenapa butuh Component Key?, hal ini agar react bisa mengenali Component ketika berubah, seperti posisinya 

______________
Pure Component
  - dalam pemrogramman, kita mengenal yang namanya Pure Function
  https://en.wikipedia.org/wiki/Pure_function
  - sebuah function kita sebut sebagai Pure Function jika memenuhi dua kriteria berikut :
    ~> function akan mengembalikan nilai yang sama untuk nilai parameter yang sama
    ~> function tidak memiliki efek samping, tidak ada perubahan pada variable non local (variable yang berada diluar
       function)

  - react mengasumsikan bahwa setiap Component yang kita buat adalah Pure Function
  - ini brarti bahwa React Component yang kita buat harus selalu mengembalikan JSX yang sama dengan input yang sama
  - walaupun  sebenarnya kita bisa saja membuat React Component yang tidak Pure, tapi sangat tidak disarankan, karena
    setiap memanggil Component dengan input sama bisa menghasilkan nilai yang tidak konsisten 

  - kita harus menghapus efek samping dari Component, contohnya kita bisa pindahkan variable counter menjadi local variable di Table, dan gunakan Props sebagai counternya

  > Dimana bisa melakukan efek samping? 
    - React menyediakan tempat khusus jika kita ingin membuat Component yang bisa menghasilkan efek samping
    - efek samping dari Component biasanya ditempatkan di Event Handler, yaitu aksi yang terjadi ketika berinteraksi
      dengan Component
    - atau ketika misal Component tergantung dengan external system (misal API), maka Reack menyediakan function 
      useEffect()
    https://react.dev/reference/react/useEffect

_____________
Event Handler
  - seperti yang kita tahu di HTML Element, kita bisa menambahkan Event Handler
  - sama juga dengan React Component, kita bisa menambahkan Event Handler pada Element di React Component
  - ada banyak sekali jenis Event Handler yang bisa kita tambahkan
  https://react.dev/reference/react-dom/components/common
  
  > Menambah Event Handler
    - untuk menambah Event Handler, biasanya kita akan tambahkan Function sebagai Handlernya
    - Bisa dalam bentuk Anonymous Function, Arrow Function, atau membuat Function terlebih dahulu didalam scope 
      Componentnya
    - nama Function untuk Handler biasanya diawali dengan nama "handle" dan diikuti dengan  jenis Event Handler, misal 
      handleClick(), handleMouseEnter(), dan lain-lain

  > Membaca props di Event Handler
    - salah satu keuntungan membuat Function Event Handler di dalam Component adalah, kita bisa membaca Props yang 
      digunakan oleh Component tersebut

  > Event Handler sebagai Props
    - seperti yang dimateri Props dibahas, Props sebenarnya adalah Javascript Object
    - Javascript Object bisa memiliki attr dengan tipe function
    - oleh karena itu, kita juga bisa membuat Event Handler di Props
    - saat membuat attr di Props yang berisikan Event Handler, biasanya nama attributenya akan di awali dengan "on"
      misal "onSmash", "onHit" dll

____________ 
Event Object 
  - saat kita membuat Event Handler Function, kita bisa menambah Event Object sebagai paramater di Function tersebut
  - React Event Object kompatibel dengan standard DOM Event Object
  https://react.dev/reference/react-dom/components/common#react-event-object
  https://developer.mozilla.org/en-US/docs/Web/API/Event
